@inherits LayoutComponentBase
@inject ILocalStorageService LocalStorageService
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthStateProvider
@using System.Net.Http.Json
@using System.Net.Http.Headers;
@using Blazored.Toast.Configuration



<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="5"
                IconType="IconType.FontAwesome" 
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
            <AuthorizeView>
                <Authorized>
                    <button class="btn btn-warning"
                            @onclick="(() => RemoveToken())">
                        Remove Token
                        <i class="oi oi-pencil"></i>
                    </button>
                </Authorized>
                <NotAuthorized>
                     <button class="btn btn-primary"
                            @onclick="(() => GetToken())">
                        Get Token
                        <i class="oi oi-pencil"></i>
                    </button>
                </NotAuthorized>
            </AuthorizeView>    
        </div>
        <article class="content px-4">
            <ErrorBoundary>
                @Body
            </ErrorBoundary>
        </article>
    </main>
</div>

@code{
    async void GetToken()
    {
        var authInfo = new BusinessObjects.Dto.Auth {UserName = "Admin", Password = "Admin" };
        var response = await HttpClient.PostAsJsonAsync("api/auth", authInfo);
        var token = await response.Content.ReadAsStringAsync();
        if (!string.IsNullOrEmpty(token))
        {
            await LocalStorageService.SetItemAsStringAsync("jwtToken", token);
            await AuthStateProvider.GetAuthenticationStateAsync();
            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }
    }
    async void RemoveToken()
    {
        await LocalStorageService.RemoveItemAsync("jwtToken");
        await AuthStateProvider.GetAuthenticationStateAsync();
    }
}
